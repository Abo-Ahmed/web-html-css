
/* css comments*/

/* css colors */
<h1 style="background-color:rgb(255, 99, 71);">...</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.5);">...</h1>
<h1 style="background-color:#ff6347;">...</h1>
<h1 style="background-color:hsl(9, 100%, 64%);">...</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.5);">...</h1>
<h1 style="background-color:red;">Hello World</h1>

/* opacity */
img {
  opacity: 0.5;
  }

/* gradient */
#grad {
  background-image: linear-gradient(to right, red , yellow);
  }

/*------------------------------------*/
/* background */
/* basic method */
body {
  background-color: #ffffff;
  background-image: url("img_tree.png") /* can take:  gradients or none */;
  background-repeat: no-repeat;
  background-position: right top;
  }
/* shorthand method */
body {
  background: #ffffff url("img_tree.png") no-repeat right top;
  }


/*------------------------------------*/
/*borders*/
p.dotted {border-style: dotted;}
p.dashed {border-style: dashed;}
p.solid {border-style: solid;}
p.double {border-style: double;}
p.groove {border-style: groove;}
p.ridge {border-style: ridge;}
p.inset {border-style: inset;}
p.outset {border-style: outset;}
p.none {border-style: none;}
p.hidden {border-style: hidden;}
p.mix {border-style: dotted dashed solid double;}

/*border-width values*/
border-width: thin | medium | thick | length

/* we can change each side of a border */
p {
  border-top-style: dotted;
  border-right-style: solid;
  border-bottom-style: dotted;
  border-left-style: solid;
  }

/*shortened method*/
p {
  border-style: dotted solid double dashed;
  }

/* rounded border */
border-radius: 5px;

/*------------------------------------*/
/* text */
text-align: start | end | left | right | center | justify 
float: left | right | none 
text-shadow: 2px 2px 5px red;
text-transform: uppercase | lowercase | capitalize
text-shadow: 2px 2px #FF0000;
direction: ltr | rtl | inherit

/*------------------------------------*/
/* font */
font-style: normal | italic | oblique | inherit 
font-size: xx-small | x-small | small | medium | large | x-large | xxlarge | smaller | larger | inherit length % 
font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit 

/* shortened method */
p.a {    font: 20px Arial, sans-serif;    }

/*------------------------------------*/
/* links */
/* unvisited link */
a:link { color: red; }
  
/* visited link */
a:visited {  color: green;  }
  
/* mouse over link */
a:hover {  color: hotpink;  }
  
/* selected link */
a:active {  color: blue;  }

/*------------------------------------*/
/* list */
list-style-type: none | asterisks | box | check | circle | diamond | disc | hyphen | square | decimal | decimalleading-zero | lower-roman | upper-roman | lower-alpha | upper-alpha | lower-greek | lower-latin | upper-latin | hebrew | armenian | georgian | cjk-ideographic | hiragana | katakana | hiragana-iroha | katakana-iroha | footnotes

/*------------------------------------*/
/* cursor styling */
<span style="cursor: auto">auto</span><br>
<span style="cursor: crosshair">crosshair</span><br>
<span style="cursor: default">default</span><br>
<span style="cursor: e-resize">e-resize</span><br>
<span style="cursor: help">help</span><br>
<span style="cursor: move">move</span><br>
<span style="cursor: n-resize">n-resize</span><br>
<span style="cursor: ne-resize">ne-resize</span><br>
<span style="cursor: nw-resize">nw-resize</span><br>
<span style="cursor: pointer">pointer</span><br>
<span style="cursor: progress">progress</span><br>
<span style="cursor: s-resize">s-resize</span><br>
<span style="cursor: se-resize">se-resize</span><br>
<span style="cursor: sw-resize">sw-resize</span><br>
<span style="cursor: text">text</span><br>
<span style="cursor: w-resize">w-resize</span><br>
<span style="cursor: wait">wait</span>

/*------------------------------------*/
/* table */
/* Add a container element (like <div>) with overflow-x:auto 
around the <table> element to make it responsive: */
<div style="overflow-x:auto;">

<table>
/*... table content ...*/
</table>

</div>

/*Specifies whether or not table borders should be collapsed*/
border-collapse: collapse | separate

/*Specifies whether or not to display borders and background on empty cells in a table*/
empty-cells: show | hide

/*Specifies the distance between the borders of adjacent cells*/
border-spacing: length length

/*Sets the layout algorithm to be used for a table*/
table-layout: auto | fixed

/*Specifies the placement of a table caption*/
caption-side: top | bottom | left | right

/*------------------------------------*/
/* display */
display: none | inline | block | inline-block | flex | inline-flex | grid | inline-grid | contents | list-item |run-in | compact | table | inline-table | table-row-group | table-header-group |

display: none; 
/*is commonly used to hide elements without 
deleting and recreating them.*/

visibility:hidden; 
/*also hides an element. However, 
the element will still take up the same space as before. 
The element will be hidden, but still affect the layout:*/

/*------------------------------------*/
/* variables */
/* global variables defined into :root selector */
:root {
  --blue: #1e90ff;
  --white: #ffffff;
  }
  
body { background-color: var(--blue); }
h2 { border-bottom: 2px solid var(--blue); }

/* local variable */
button {
  --wow: #0000ff;
  background-color: var(--wow);
  padding: 5px;
  }

/* calculate function in css */
width: calc(100% - 100px);

/* change vaiable with javascript */
<script>

/*Get the root element*/
var r = document.querySelector(':root');

/* Get the styles (properties and values) for the root*/
var rs = getComputedStyle(r);

/* Getting css variable value*/
rs.getPropertyValue('--blue')

/* Setting css variable value */
r.style.setProperty('--blue', 'lightblue');

</script>


/*------------------------------------*/
/*styling examples*/
/* the sticky element sticks to the top 
of the page (top: 0), when you reach its scroll position. */
div.sticky {
	position: sticky;
	top: 0;
	background-color: green;
	border: 2px solid #4CAF50;
  }


/* button shadow on hover */
.button2:hover {
	box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
  }

/* add styling depending on screen size */
@media screen and (min-width: 480px) {
	body {
	  background-color: lightgreen;
	}
  }

/*------------------------------------*/
/* icons */
/*free icons website:  https://www.svgrepo.com/ */

/*free icons: https://fontawesome.com/ */
/* add this to start of website */
/* <script src="https://kit.fontawesome.com/b760a80f7e.js" crossorigin="anonymous"></script> */

/*------------------------------------*/
/* The position Property */
/* specifies the type of positioning method used for an element. */

/* Static --> static; is not positioned in any special way; it is always positioned according to the normal flow of the page: */

/* Relative --> Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element. */

/* Fixed --> is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element. */

/* Absolute -->  is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).	However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling. */

/* Sticky -->  is positioned based on the user scroll position. A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed). */

/*------------------------------------*/
/* The overflow Property */
/* controls what happens to content that is too big to fit into an area, it specifies whether to clip the content or to add scrollbars. */

/* visible - Default - the content is not clipped & renders outside element's box */
/* hidden - The overflow is clipped, and the rest of the content will be invisible */
/* scroll - The overflow is clipped, and a scrollbar is added */
/* auto - Similar to scroll, but it adds scrollbars only when necessary */

/*------------------------------------*/
/* The clear Property */
/* specifies what happens with the element that is next to a floating element. */
/* The float element lose it's automatically filled width, and reduce it to as small as it can get. clear will make sure there are no floating elements on the side you tell. If there is one, it will move down until there is none in the given direction. clear: both will check this for both directions */

/* none - default - element is not pushed below left or right floated elements. */
/* left - The element is pushed below left floated elements */
/* right - The element is pushed below right floated elements */
/* both - The element is pushed below both left and right floated elements */
/* inherit - The element inherits the clear value from its parent */

/*------------------------------------*/
/*dimenstions*/
/*Absolute Measurement*/
% = percentage
cm = centimeter
in = inch
mm = milimeter
pc = pica (1p = 12 points)
pt = int (1pt = 1/72 inch)
px = pixel (1px = 1/96 inch)

/*Relative Measurement*/
ch = width of the “0” glyph found in the font for the font size used to render
em = 1em = current font size of current element
ex = x-height of the element’s font
gd = the grid defined by ‘layout-grid’
rem = the font size of the root element
vh = the viewport’s height
vw = the viewport's width
vm = viewport’s height or width, whichever is smaller of the two

/* width and height values */
/* auto - This is default. The browser calculates the height and width */
/* length - Defines the height/width in px, cm etc. */
/* % - Defines the height/width in percent of the containing block */
/* initial - Sets the height/width to its default value */
/* inherit - The height/width will be inherited from its parent value */

/*------------------------------------*/
/*grid styling in bootstrap*/
/* xs = extra small screens (mobile phones)*/
/* sm = small screens (tablets)*/
/* md = medium screens (some desktops)*/
/* lg = large screens (remaining desktops)*/

/*col-xs-12*/
/*the numbers (1-12) represent a portion of the total width of any div
all divs are divided into 12 columns
so, col-*-6 spans 6 of 12 columns (half the width), 
col-*-12 spans 12 of 12 columns (the entire width),
if you want two equal columns to span a div, write*/
<div class="row">
  <div class="col-xs-6">Column 1-a</div>
  <div class="col-xs-6">Column 1-b</div>
</div>


/*------------------------------------*/
/* css layouts */
/* - Block, for sections in a webpage
- Inline, for text 
- Table, for two-dimensional table data 
- Positioned, for explicit position of an element 
- flexbox layout   */

/* flexbox layout */
/* container becomes flexible by setting the display property to flex */

/* flex-direction --> defines in which direction the container wants to stack the flex items. */
flex-direction: column; /* stacks items vertically (from top to bottom) */
flex-direction: column-reverse; /* stacks items vertically (from bottom to top) */
flex-direction: row; /* stacks items horizontally (from left to right) */
flex-direction: row-reverse; /* stacks items horizontally (from right to left) */

/* flex-wrap --> specifies whether the flex items should wrap or not. */
flex-wrap: wrap;
flex-wrap: nowrap;
flex-wrap: wrap-reverse; /* warp in reverse order */

/* flex-flow --> shorthand property for setting both the flex-direction and flex-wrap properties. */
flex-flow: row wrap;

/* justify-content --> used to align the flex items: */
justify-content: center;  /* center of the container */
justify-content: flex-start; /* default - beginning of the container */
justify-content: flex-end; /* default - end of the container */
justify-content: space-around; /* displays the flex items with space before, between, and after the lines */
justify-content: space-between; /* displays the flex items with space between the lines */


/* align-items --> is used to align the flex items. */
align-items: center; /* aligns the flex items in the middle of the container */
align-items: flex-start;
align-items: flex-end;
align-items: stretch;
align-items: baseline; /* ligns the flex items such as their baselines aligns */

/* align-content property is used to align the flex lines. */
align-content: space-between;
align-content: space-around;
align-content: stretch;
align-content: center;
align-content: flex-start;
align-content: flex-end;

/* justify-content and align-items are similar in their behviour, the difference being that justify-content works on the the main axis while align-items works on the cross axis. align-content works only on multi-line containers and has no effect on single line containers. */

/* Perfect Centering */
/* Set both the justify-content and align-items properties to center */
Example
.flex-container {
  display: flex;
  height: 300px;
  justify-content: center;
  align-items: center;
}